<%- include partials/header.ejs %>

	<html>

	<head>
		<script type="text/javascript"
			src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
	</head>

	<body>

		<script> //Web3 Functions

			// Connection to Web3 Provider Metamask
			let account;
			const connectMetamask = async () => {
				if (window.ethereum !== "underfined") {
					const accounts = await ethereum.request({ method: "eth_requestAccounts" });
					account = accounts[0];
					document.getElementById("success").innerHTML = `Successfully Connected to your Web3 Wallet!`;
					document.getElementById("userArea").innerHTML = `Your Wallet Address: ${account}`;
					connectContract();
				}
			}

			// Deployed Smart Contract ABI
			const connectContract = async () => {
				const ABI = [
					{
						"inputs": [
							{
								"internalType": "string",
								"name": "_uaddress",
								"type": "string"
							}
						],
						"name": "deposit",
						"outputs": [],
						"stateMutability": "payable",
						"type": "function"
					},
					{
						"inputs": [
							{
								"internalType": "address payable",
								"name": "_to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "_amount",
								"type": "uint256"
							}
						],
						"name": "withdraw",
						"outputs": [],
						"stateMutability": "nonpayable",
						"type": "function"
					},
					{
						"inputs": [],
						"name": "getAddress",
						"outputs": [
							{
								"internalType": "address",
								"name": "",
								"type": "address"
							}
						],
						"stateMutability": "view",
						"type": "function"
					},
					{
						"inputs": [],
						"name": "getBalance",
						"outputs": [
							{
								"internalType": "uint256",
								"name": "",
								"type": "uint256"
							}
						],
						"stateMutability": "view",
						"type": "function"
					},
					{
						"inputs": [],
						"name": "getUserAddress",
						"outputs": [
							{
								"internalType": "string",
								"name": "",
								"type": "string"
							}
						],
						"stateMutability": "view",
						"type": "function"
					},
					{
						"inputs": [],
						"name": "userAddress",
						"outputs": [
							{
								"internalType": "string",
								"name": "",
								"type": "string"
							}
						],
						"stateMutability": "view",
						"type": "function"
					},
					{
						"inputs": [],
						"name": "userName",
						"outputs": [
							{
								"internalType": "string",
								"name": "",
								"type": "string"
							}
						],
						"stateMutability": "view",
						"type": "function"
					}
				];

				const Address = "0xE4b1B22f07f6Eb85b0b80C91670cF666058DE4D4"; // Contract Address from Remix/ Etherscan
				window.web3 = await new Web3(window.ethereum);
				window.contract = await new window.web3.eth.Contract(ABI, Address);
				document.getElementById("contractArea").innerHTML = "Success! Connected to Smart Contract"; // Calling the elementID above
			}

			// Address of Smart Contract
			// const getContractAccount = async () => {
			//     const data = await window.contract.methods.getAddress().call();
			//     document.getElementById("contractAccount").innerHTML = `Contract Account: ${data}`;
			// }

			//Get Balance of Smart Contract
			// const getBalanceApple = async () => {
			//     const data = await window.contract.methods.getBalance().call();
			//     document.getElementById("balanceArea").innerHTML = `Contract Balance: ${data}`;
			// }

			// Function of Payment for purchased item and store User Address in Smart Contract
			const depositContract = async () => {
				const price = 0.5;
				const name = document.getElementById("nameInput").value;
				const deliveryAddress = document.getElementById("deliveryAddress").value;
				const amount = document.getElementById("depositInput").value;
				await window.contract.methods.deposit(deliveryAddress).send({ from: account, value: amount });
			}

			// Function to Send ETH to any wallet from deployed Smart Contract
			// const withdraw = async () => {
			//     const amount = document.getElementById("amountInput").value;
			//     const address = document.getElementById("addressInput").value;
			//     await window.contract.methods.withdraw(address, amount).send({from: account});
			// }

			// Function to fetch User's address stored on Smart Contract
			const fetchdata = async () => {
				const retrievedData = await window.contract.methods.getUserAddress().call();
				document.getElementById("details").innerHTML = `Your Delivery Address: ${retrievedData}`;
			}
		</script>

		<div class="row my-3">
			<div class="col-md-6 mt-3 mb-4">
				<h3 class="text-center"><strong>Find Latest Prices of Top Crypto Coins</strong></h3>
				<a href="https://coinmarketcap.com/"><img src="/images/coins1.png"></a>
			</div>
			<div class="col-md-3 mt-4">
				<div class="card text-white bg-dark mb-3 text-center">
					<h4><strong>Payment Section</strong></h4>
				</div>
				<div id="readArea"> <!--Connecting to MetaMask -->
					<button class="btn" onclick="connectMetamask()">Connect to Your Metamask Wallet</button>
					<p id="success"></p>
					<p id="userArea"></p>
					<!-- index html to meta-->

					<!-- <button class="btn btn-info" onclick="connectContract()">Connect to Contract</button> -->
					<p id="contractArea"></p>
					<!-- meta to SC -->

					<!-- <button class="btn btn-danger" onclick="getContractAccount()"> Get Contract Address </button>
        <p id="contractAccount">Contract Account: Not Connected to Contract</p> -->
					<!-- CAlling the function designed in Transactions.sol get deployment addresss -->

					<!-- <button class="btn btn-secondary" onclick="getBalanceApple()">Get Balance of Contract</button>
        <p id="balanceArea">Balance: Not Connected to Contract</p> -->
					<!-- CAlling the function designed in Transactions.sol get balance -->
					<div class="card text-white bg-dark mb-3 text-center">
						<h5>Enter Details for Delivery</h5>
					</div>
					<input type="text" id="nameInput" placeholder="Enter Your Name"><br>
					<input type="text" id="deliveryAddress" placeholder="Enter Your Address"><br>
					<input type="number" id="depositInput" placeholder="Enter Amount"><br><br>
					<!--Deposit to contract calling on deposit function-->
					<button class="btn btn-success" onclick="depositContract()">Make Payment</button>
					<a class="btn btn-secondary ml-5" href="/payment" role="button">Cancel</a>
				</div>
			</div>

			<div class="col-md-3 mt-4">
				<div id="writeArea"><!-- WRITING TO CONTRACT -->
					<!-- <button class="btn btn-success" onclick="depositContract()">Make Payment</button><br>
        <input type="number" id="depositInput" placeholder="Enter Amount"><br> <br> -->
					<div class="card text-white bg-dark mb-3 text-center mr-3">
						<h4><strong>Verification Section</strong></h4>
					</div>
					<button class="btn btn-primary" onclick="fetchdata()">Verify your delivery address</button><br>
					<p id="details"></p>

					<a class="btn btn-success"
						href="https://sepolia.etherscan.io/address/0xe4b1b22f07f6eb85b0b80c91670cf666058de4d4"
						role="button">View Your Transaction</a>

					<!-- <button class="btn btn-danger" onclick="withdraw()">Withdraw ETH To Any Address</button> <br>
        <input type="text" id="addressInput" placeholder="Enter Address of account you want to send ETH to"> <br>
        <input type="number" id="amountInput" placeholder="Enter Amount you want to send">  -->
					<!-- CAlling the function designed in Transactions.sol -->
					<!-- calling the withdraw function -->
				</div>
			</div>
		</div>


	</body>

	</html>

	<%- include partials/footer.ejs %>